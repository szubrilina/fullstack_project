{"ast":null,"code":"var _jsxFileName = \"/home/sofia/Documents/MIPT/fullstack/My_project/my-app/src/components/CreateNewSet/CreateNewSet.js\";\nimport React, { useState } from 'react';\nimport AddSetDescription from './AddSetDescription';\nimport AddSetName from './AddSetName';\nimport '../../style/CreateNewSet.css'; // class Word {\n//     constructor(part1, part2) {\n//         this.id = Date.now();\n//         this.part1 = part1;\n//         this.part2 = part2;\n//         this.isLearnt = false;\n//         this.lastSeen = \"01.01.2000\"; // dd.mm.yyyy\n//     }\n// }\n// class WordSet {\n//     constructor(wordArray) {\n//         this.words = wordArray;\n//     }\n//     deleteWord(id) {\n//         this.words.filter(elem => elem.id !== id)\n//     }\n//     addWord(word) {\n//         this.words.push(word);\n//     }\n// }\n//  data initialization\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet wordSet = new WordSet([new Word('cat', 'koshka'), new Word('dog', 'cobaka')]);\nconst [state, setState] = useState(wordSet);\n\nconst addItem = (part1, part2) => {\n  setState(() => {\n    state.addItem(part1, part2);\n    return state;\n  });\n};\n\nconst deleteItem = id => {\n  setState(() => {\n    state.deleteItem(id);\n    return state;\n  });\n}; // data initialization\n\n\nfunction CreateNewSet() {\n  // this.button2Click = () => {\n  //     let text = this.input2.value;\n  //     if(text && text.length > 0) {\n  //         alert(`Btn2: ${text}`);\n  //     } \n  //     else {\n  //         alert(`Btn2: empty`);\n  //     }\n  // }\n  // const onClick =  event => {\n  //     // let val = event.previousElementSibling.value;\n  //     let val = this.ref.wordPart1.value;\n  //     if(val == ''){\n  //         console.log('no input');\n  //     }else{\n  //        console.log(val);\n  //     }\n  //   }\n  // onClick($this) {\n  //     var val = $this.previousElementSibling.value;\n  //     if(val == ''){\n  //         console.log('no input');\n  //     }else{\n  //        console.log(val);\n  //     }\n  // }\n  // render() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(AddSetName, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AddSetDescription, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add new words to your set!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add_word\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"add_word_1\",\n        placeholder: \"type a word\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"add_word_2\",\n        placeholder: \"type translation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        children: \"add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n\n_c = CreateNewSet;\nexport default CreateNewSet;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateNewSet\");","map":{"version":3,"sources":["/home/sofia/Documents/MIPT/fullstack/My_project/my-app/src/components/CreateNewSet/CreateNewSet.js"],"names":["React","useState","AddSetDescription","AddSetName","wordSet","WordSet","Word","state","setState","addItem","part1","part2","deleteItem","id","CreateNewSet"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAO,8BAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AACC,IAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAY,CACvB,IAAIC,IAAJ,CAAS,KAAT,EAAgB,QAAhB,CADuB,EAEvB,IAAIA,IAAJ,CAAS,KAAT,EAAgB,QAAhB,CAFuB,CAAZ,CAAd;AAKD,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACG,OAAD,CAAlC;;AACA,MAAMK,OAAO,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC9BH,EAAAA,QAAQ,CAAC,MAAM;AACXD,IAAAA,KAAK,CAACE,OAAN,CAAcC,KAAd,EAAqBC,KAArB;AACA,WAAOJ,KAAP;AACH,GAHO,CAAR;AAIH,CALD;;AAOA,MAAMK,UAAU,GAAIC,EAAD,IAAQ;AACvBL,EAAAA,QAAQ,CAAC,MAAM;AACXD,IAAAA,KAAK,CAACK,UAAN,CAAiBC,EAAjB;AACA,WAAON,KAAP;AACH,GAHO,CAAR;AAIH,CALD,C,CAMA;;;AAEA,SAASO,YAAT,GAAwB;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,sBACI;AAAA,4BAEI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAMI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,8BACI;AAAO,QAAA,SAAS,EAAC,YAAjB;AAA8B,QAAA,WAAW,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,SAAS,EAAC,YAAjB;AAA8B,QAAA,WAAW,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,SAAS,EAAC,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;KA7CQA,Y;AA+CT,eAAeA,YAAf","sourcesContent":["import React, {useState} from 'react';\nimport AddSetDescription from './AddSetDescription';\nimport AddSetName from './AddSetName';\nimport '../../style/CreateNewSet.css';\n\n// class Word {\n//     constructor(part1, part2) {\n//         this.id = Date.now();\n//         this.part1 = part1;\n//         this.part2 = part2;\n//         this.isLearnt = false;\n//         this.lastSeen = \"01.01.2000\"; // dd.mm.yyyy\n//     }\n// }\n// class WordSet {\n//     constructor(wordArray) {\n//         this.words = wordArray;\n//     }\n\n//     deleteWord(id) {\n//         this.words.filter(elem => elem.id !== id)\n//     }\n\n//     addWord(word) {\n//         this.words.push(word);\n//     }\n// }\n\n//  data initialization\n let wordSet = new WordSet([\n    new Word('cat', 'koshka'), \n    new Word('dog', 'cobaka'), \n]);\n\nconst [state, setState] = useState(wordSet);\nconst addItem = (part1, part2) => {\n    setState(() => {\n        state.addItem(part1, part2);\n        return state\n    })\n}; \n\nconst deleteItem = (id) => {\n    setState(() => {\n        state.deleteItem(id);\n        return state;\n    });\n}; \n// data initialization\n\nfunction CreateNewSet() {\n    \n    // this.button2Click = () => {\n    //     let text = this.input2.value;\n    //     if(text && text.length > 0) {\n    //         alert(`Btn2: ${text}`);\n    //     } \n    //     else {\n    //         alert(`Btn2: empty`);\n    //     }\n    // }\n    // const onClick =  event => {\n    //     // let val = event.previousElementSibling.value;\n    //     let val = this.ref.wordPart1.value;\n    //     if(val == ''){\n    //         console.log('no input');\n    //     }else{\n    //        console.log(val);\n    //     }\n    //   }\n\n    // onClick($this) {\n    //     var val = $this.previousElementSibling.value;\n    //     if(val == ''){\n    //         console.log('no input');\n    //     }else{\n    //        console.log(val);\n    //     }\n    // }\n\n    // render() {\n    return (\n        <div>\n            {/* <h1>CreateNewSet page!</h1> */}\n            <AddSetName />\n            <AddSetDescription />\n            <h2>Add new words to your set!</h2>\n\n            <div className='add_word'>\n                <input className='add_word_1' placeholder='type a word' />\n                <input className='add_word_2' placeholder='type translation' />\n                <button className='button' >add</button>\n            </div>\n        </div>\n    )\n}\n\nexport default CreateNewSet;\n\n"]},"metadata":{},"sourceType":"module"}