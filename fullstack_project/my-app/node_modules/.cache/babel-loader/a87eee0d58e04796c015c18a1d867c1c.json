{"ast":null,"code":"var _jsxFileName = \"/home/sofia/Documents/MIPT/fullstack/My_project/my-app/src/components/CreateNewSet/CreateNewSet.js\";\nimport React, { useState } from 'react';\nimport AddSetDescription from './AddSetDescription';\nimport AddSetName from './AddSetName';\nimport '../../style/CreateNewSet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Word {\n  constructor(part1, part2) {\n    this.id = Date.now();\n    this.part1 = part1;\n    this.part2 = part2;\n    this.isLearnt = false;\n    this.lastSeen = \"01.01.2000\"; // dd.mm.yyyy\n  }\n\n}\n\nclass WordSet {\n  constructor(wordArray) {\n    this.words = wordArray;\n  }\n\n  deleteWord(id) {\n    this.words.filter(elem => elem.id !== id);\n  }\n\n  addWord(word) {\n    this.words.push(word);\n  }\n\n} // data initialization\n\n\nlet wordSet = new WordSet([new Word('cat', 'koshka'), new Word('dog', 'cobaka')]);\nconst [state, setState] = useState(wordSet);\n\nconst addItem = (part1, part2) => {\n  setState(() => {\n    state.addItem(part1, part2);\n    return state;\n  });\n};\n\nconst deleteItem = id => {\n  setState(() => {\n    state.deleteItem(id);\n    return state;\n  });\n}; // data initialization\n\n\nfunction CreateNewSet() {\n  // class CreateNewSet extends React.Component {\n  state = {\n    value: ''\n  };\n\n  handleChange = _ref => {\n    let {\n      target: {\n        value\n      }\n    } = _ref;\n    this.setState({\n      value\n    });\n  };\n\n  handleClick = () => {\n    const {\n      value\n    } = this.state;\n    const {\n      onClick\n    } = this.props;\n    onClick(value);\n  }; // const onClick =  event => {\n  //     // let val = event.previousElementSibling.value;\n  //     let val = this.ref.wordPart1.value;\n  //     if(val == ''){\n  //         console.log('no input');\n  //     }else{\n  //        console.log(val);\n  //     }\n  //   }\n  // onClick($this) {\n  //     var val = $this.previousElementSibling.value;\n  //     if(val == ''){\n  //         console.log('no input');\n  //     }else{\n  //        console.log(val);\n  //     }\n  // }\n  // render() {\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"state: \", `{ value: '${value}' }`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: value,\n      onChange: this.handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.handleClick,\n      children: \"Set value\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 13\n  }, this) // <div>\n  //     {/* <h1>CreateNewSet page!</h1> */}\n  //     <AddSetName />\n  //     <AddSetDescription />\n  //     <h2>Add new words to your set!</h2>\n  //     <div className='add_word'>\n  //         {/* <input ref=\"wordPart1\" className='add_word_1' placeholder='type a word' />\n  //         <input className='add_word_2' placeholder='type translation' />\n  //         <button className='button' onClick={onClick}>add</button> */}\n  //         <div class=\"items\">\n  //             <input type=\"\" name=\"\" id=\"keywordSearch1\" placeholder=\"\" />\n  //             <button onClick={onClick(this)}>Search 1</button>\n  //         </div>\n  //     </div>\n  //     {/* <h2>state.words[0].part1</h2> */}\n  //     {/* <div className='todo_list'>\n  //     {state.words.map(elem => <ToDoItem key = {elem.id} item={elem}/>)}\n  //     </div> */}\n  // </div>\n  ; // }\n}\n\n_c = CreateNewSet;\nexport default CreateNewSet; // const handleChildClick = value => alert(`\"${value}\" has been set in `);\n// ReactDOM.render(<CreateNewSet onClick={handleChildClick} />, document.getElementById('root'))\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateNewSet\");","map":{"version":3,"sources":["/home/sofia/Documents/MIPT/fullstack/My_project/my-app/src/components/CreateNewSet/CreateNewSet.js"],"names":["React","useState","AddSetDescription","AddSetName","Word","constructor","part1","part2","id","Date","now","isLearnt","lastSeen","WordSet","wordArray","words","deleteWord","filter","elem","addWord","word","push","wordSet","state","setState","addItem","deleteItem","CreateNewSet","value","handleChange","target","handleClick","onClick","props"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport AddSetDescription from './AddSetDescription';\nimport AddSetName from './AddSetName';\nimport '../../style/CreateNewSet.css';\n\nclass Word {\n    constructor(part1, part2) {\n        this.id = Date.now();\n        this.part1 = part1;\n        this.part2 = part2;\n        this.isLearnt = false;\n        this.lastSeen = \"01.01.2000\"; // dd.mm.yyyy\n    }\n}\nclass WordSet {\n    constructor(wordArray) {\n        this.words = wordArray;\n    }\n\n    deleteWord(id) {\n        this.words.filter(elem => elem.id !== id)\n    }\n\n    addWord(word) {\n        this.words.push(word);\n    }\n}\n\n // data initialization\n let wordSet = new WordSet([\n    new Word('cat', 'koshka'), \n    new Word('dog', 'cobaka'), \n]);\n\nconst [state, setState] = useState(wordSet);\nconst addItem = (part1, part2) => {\n    setState(() => {\n        state.addItem(part1, part2);\n        return state\n    })\n}; \n\nconst deleteItem = (id) => {\n    setState(() => {\n        state.deleteItem(id);\n        return state;\n    });\n}; \n// data initialization\n\nfunction CreateNewSet() {\n// class CreateNewSet extends React.Component {\n\n    state = {\n        value: ''\n    }\n     \n    handleChange = ({ target: { value }}) => {\n        this.setState({ value });\n    }\n\n    handleClick = () => {\n        const { value } = this.state;\n        const { onClick } = this.props;\n        onClick(value);        \n    }\n\n    // const onClick =  event => {\n    //     // let val = event.previousElementSibling.value;\n    //     let val = this.ref.wordPart1.value;\n    //     if(val == ''){\n    //         console.log('no input');\n    //     }else{\n    //        console.log(val);\n    //     }\n    //   }\n\n    // onClick($this) {\n    //     var val = $this.previousElementSibling.value;\n    //     if(val == ''){\n    //         console.log('no input');\n    //     }else{\n    //        console.log(val);\n    //     }\n    // }\n\n    // render() {\n        return (\n            <div>\n            <p>state: {`{ value: '${value}' }`}</p>\n            <input value={value} onChange={this.handleChange} />\n            <button onClick={this.handleClick}>Set value</button>\n          </div>\n            // <div>\n            //     {/* <h1>CreateNewSet page!</h1> */}\n            //     <AddSetName />\n            //     <AddSetDescription />\n            //     <h2>Add new words to your set!</h2>\n\n            //     <div className='add_word'>\n            //         {/* <input ref=\"wordPart1\" className='add_word_1' placeholder='type a word' />\n            //         <input className='add_word_2' placeholder='type translation' />\n            //         <button className='button' onClick={onClick}>add</button> */}\n            //         <div class=\"items\">\n            //             <input type=\"\" name=\"\" id=\"keywordSearch1\" placeholder=\"\" />\n            //             <button onClick={onClick(this)}>Search 1</button>\n            //         </div>\n            //     </div>\n\n                \n\n            //     {/* <h2>state.words[0].part1</h2> */}\n            //     {/* <div className='todo_list'>\n            //     {state.words.map(elem => <ToDoItem key = {elem.id} item={elem}/>)}\n            //     </div> */}\n            // </div>\n        )\n    // }\n}\n\nexport default CreateNewSet;\n// const handleChildClick = value => alert(`\"${value}\" has been set in `);\n\n// ReactDOM.render(<CreateNewSet onClick={handleChildClick} />, document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}