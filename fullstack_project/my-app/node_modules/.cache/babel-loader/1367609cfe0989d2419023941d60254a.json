{"ast":null,"code":"var _jsxFileName = \"/home/sofia/Documents/MIPT/fullstack/My_project/my-app/src/components/CreateNewSet/CreateNewSet.js\";\nimport React, { useState } from 'react';\nimport AddSetDescription from './AddSetDescription';\nimport AddSetName from './AddSetName';\nimport '../../style/CreateNewSet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Word {\n  constructor(part1, part2) {\n    this.id = Date.now();\n    this.part1 = part1;\n    this.part2 = part2;\n    this.isLearnt = false;\n    this.lastSeen = \"01.01.2000\"; // dd.mm.yyyy\n  }\n\n}\n\nclass WordSet {\n  constructor(wordArray) {\n    this.words = wordArray;\n  }\n\n  deleteWord(id) {\n    this.words.filter(elem => elem.id !== id);\n  }\n\n  addWord(word) {\n    this.words.push(word);\n  }\n\n} // data initialization\n//  let wordSet = new WordSet([\n//     new Word('cat', 'koshka'), \n//     new Word('dog', 'cobaka'), \n// ]);\n// const [state, setState] = useState(wordSet);\n// const addItem = (part1, part2) => {\n//     setState(() => {\n//         state.addItem(part1, part2);\n//         return state\n//     })\n// }; \n// const deleteItem = (id) => {\n//     setState(() => {\n//         state.deleteItem(id);\n//         return state;\n//     });\n// }; \n// data initialization\n\n\nfunction CreateNewSet() {\n  this.button2Click = () => {\n    let text = this.input2.value;\n\n    if (text && text.length > 0) {\n      alert(`Btn2: ${text}`);\n    } else {\n      alert(`Btn2: empty`);\n    }\n  }; // const onClick =  event => {\n  //     // let val = event.previousElementSibling.value;\n  //     let val = this.ref.wordPart1.value;\n  //     if(val == ''){\n  //         console.log('no input');\n  //     }else{\n  //        console.log(val);\n  //     }\n  //   }\n  // onClick($this) {\n  //     var val = $this.previousElementSibling.value;\n  //     if(val == ''){\n  //         console.log('no input');\n  //     }else{\n  //        console.log(val);\n  //     }\n  // }\n  // render() {\n\n\n  return (\n    /*#__PURE__*/\n    // </div>\n    // <div>\n    //     {/* <h1>CreateNewSet page!</h1> */}\n    //     <AddSetName />\n    //     <AddSetDescription />\n    //     <h2>Add new words to your set!</h2>\n    //     <div className='add_word'>\n    //         {/* <input ref=\"wordPart1\" className='add_word_1' placeholder='type a word' />\n    //         <input className='add_word_2' placeholder='type translation' />\n    //         <button className='button' onClick={onClick}>add</button> */}\n    //         <div class=\"items\">\n    //             <input type=\"\" name=\"\" id=\"keywordSearch1\" placeholder=\"\" />\n    //             <button onClick={onClick(this)}>Search 1</button>\n    //         </div>\n    //     </div>\n    //     {/* <h2>state.words[0].part1</h2> */}\n    //     {/* <div className='todo_list'>\n    //     {state.words.map(elem => <ToDoItem key = {elem.id} item={elem}/>)}\n    //     </div> */}\n    // </div>\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        placeholder: \"...\",\n        ref: ref => this.input2 = ref\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        type: \"button\",\n        onClick: this.button2Click,\n        children: \"Go!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)\n  );\n}\n\n_c = CreateNewSet;\nexport default CreateNewSet;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateNewSet\");","map":{"version":3,"sources":["/home/sofia/Documents/MIPT/fullstack/My_project/my-app/src/components/CreateNewSet/CreateNewSet.js"],"names":["React","useState","AddSetDescription","AddSetName","Word","constructor","part1","part2","id","Date","now","isLearnt","lastSeen","WordSet","wordArray","words","deleteWord","filter","elem","addWord","word","push","CreateNewSet","button2Click","text","input2","value","length","alert","ref"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAO,8BAAP;;;AAEA,MAAMC,IAAN,CAAW;AACPC,EAAAA,WAAW,CAACC,KAAD,EAAQC,KAAR,EAAe;AACtB,SAAKC,EAAL,GAAUC,IAAI,CAACC,GAAL,EAAV;AACA,SAAKJ,KAAL,GAAaA,KAAb;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKI,QAAL,GAAgB,KAAhB;AACA,SAAKC,QAAL,GAAgB,YAAhB,CALsB,CAKQ;AACjC;;AAPM;;AASX,MAAMC,OAAN,CAAc;AACVR,EAAAA,WAAW,CAACS,SAAD,EAAY;AACnB,SAAKC,KAAL,GAAaD,SAAb;AACH;;AAEDE,EAAAA,UAAU,CAACR,EAAD,EAAK;AACX,SAAKO,KAAL,CAAWE,MAAX,CAAkBC,IAAI,IAAIA,IAAI,CAACV,EAAL,KAAYA,EAAtC;AACH;;AAEDW,EAAAA,OAAO,CAACC,IAAD,EAAO;AACV,SAAKL,KAAL,CAAWM,IAAX,CAAgBD,IAAhB;AACH;;AAXS,C,CAcb;AACD;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASE,YAAT,GAAwB;AAEpB,OAAKC,YAAL,GAAoB,MAAM;AACtB,QAAIC,IAAI,GAAG,KAAKC,MAAL,CAAYC,KAAvB;;AACA,QAAGF,IAAI,IAAIA,IAAI,CAACG,MAAL,GAAc,CAAzB,EAA4B;AACxBC,MAAAA,KAAK,CAAE,SAAQJ,IAAK,EAAf,CAAL;AACH,KAFD,MAGK;AACDI,MAAAA,KAAK,CAAE,aAAF,CAAL;AACH;AACJ,GARD,CAFoB,CAWpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACI;AAAA;AAGE;AACE;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAAA,8BACI;AAAQ,QAAA,IAAI,EAAC,MAAb;AAAoB,QAAA,SAAS,EAAC,cAA9B;AAA8C,QAAA,WAAW,EAAC,KAA1D;AAAgE,QAAA,GAAG,EAAEC,GAAG,IAAI,KAAKJ,MAAL,GAAcI;AAA1F;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,SAAS,EAAC,iBAAlB;AAAoC,QAAA,IAAI,EAAC,QAAzC;AAAkD,QAAA,OAAO,EAAE,KAAKN,YAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AA5BJ;AAiCP;;KAhEQD,Y;AAkET,eAAeA,YAAf","sourcesContent":["import React, {useState} from 'react';\nimport AddSetDescription from './AddSetDescription';\nimport AddSetName from './AddSetName';\nimport '../../style/CreateNewSet.css';\n\nclass Word {\n    constructor(part1, part2) {\n        this.id = Date.now();\n        this.part1 = part1;\n        this.part2 = part2;\n        this.isLearnt = false;\n        this.lastSeen = \"01.01.2000\"; // dd.mm.yyyy\n    }\n}\nclass WordSet {\n    constructor(wordArray) {\n        this.words = wordArray;\n    }\n\n    deleteWord(id) {\n        this.words.filter(elem => elem.id !== id)\n    }\n\n    addWord(word) {\n        this.words.push(word);\n    }\n}\n\n // data initialization\n//  let wordSet = new WordSet([\n//     new Word('cat', 'koshka'), \n//     new Word('dog', 'cobaka'), \n// ]);\n\n// const [state, setState] = useState(wordSet);\n// const addItem = (part1, part2) => {\n//     setState(() => {\n//         state.addItem(part1, part2);\n//         return state\n//     })\n// }; \n\n// const deleteItem = (id) => {\n//     setState(() => {\n//         state.deleteItem(id);\n//         return state;\n//     });\n// }; \n// data initialization\n\nfunction CreateNewSet() {\n    \n    this.button2Click = () => {\n        let text = this.input2.value;\n        if(text && text.length > 0) {\n            alert(`Btn2: ${text}`);\n        } \n        else {\n            alert(`Btn2: empty`);\n        }\n    }\n    // const onClick =  event => {\n    //     // let val = event.previousElementSibling.value;\n    //     let val = this.ref.wordPart1.value;\n    //     if(val == ''){\n    //         console.log('no input');\n    //     }else{\n    //        console.log(val);\n    //     }\n    //   }\n\n    // onClick($this) {\n    //     var val = $this.previousElementSibling.value;\n    //     if(val == ''){\n    //         console.log('no input');\n    //     }else{\n    //        console.log(val);\n    //     }\n    // }\n\n    // render() {\n        return (\n            \n            \n          // </div>\n            // <div>\n            //     {/* <h1>CreateNewSet page!</h1> */}\n            //     <AddSetName />\n            //     <AddSetDescription />\n            //     <h2>Add new words to your set!</h2>\n\n            //     <div className='add_word'>\n            //         {/* <input ref=\"wordPart1\" className='add_word_1' placeholder='type a word' />\n            //         <input className='add_word_2' placeholder='type translation' />\n            //         <button className='button' onClick={onClick}>add</button> */}\n            //         <div class=\"items\">\n            //             <input type=\"\" name=\"\" id=\"keywordSearch1\" placeholder=\"\" />\n            //             <button onClick={onClick(this)}>Search 1</button>\n            //         </div>\n            //     </div>\n\n                \n\n            //     {/* <h2>state.words[0].part1</h2> */}\n            //     {/* <div className='todo_list'>\n            //     {state.words.map(elem => <ToDoItem key = {elem.id} item={elem}/>)}\n            //     </div> */}\n            // </div>\n\n            <div>\n                <input  type=\"text\" className=\"form-control\"  placeholder=\"...\" ref={ref => this.input2 = ref} />\n                <button className=\"btn btn-primary\" type=\"button\" onClick={this.button2Click}>Go!</button>\n            </div>\n        )\n}\n\nexport default CreateNewSet;\n\n"]},"metadata":{},"sourceType":"module"}